---
- hosts: localhost
  roles:
    - name: trombik.freebsd_pkg_repo
      when: ansible_os_family == 'FreeBSD'
    - name: trombik.redhat_repo
      when: ansible_os_family == 'RedHat'
    - name: trombik.pip
    - ansible-role-buildbot
    - name: trombik.buildbot_worker
  vars:
    project_worker_name: example-worker
    project_worker_password: pass

    buildbot_conf_dir: "{% if ansible_os_family == 'Debian' %}{{ buildbot_root_dir }}/masters/default{% else %}{{ buildbot_root_dir }}{% endif %}"
    buildbot_flags_ubuntu: |
      MASTER_ENABLED[1]=1
      MASTER_NAME[1]="default"
      MASTER_USER[1]="buildbot"
      MASTER_BASEDIR[1]="{{ buildbot_conf_dir }}"
      MASTER_OPTIONS[1]=""
      MASTER_PREFIXCMD[1]=""
    buildbot_flags_freebsd: |
      buildbot_basedir="{{ buildbot_conf_dir }}"
      buildbot_user="{{ buildbot_user }}"

    buildbot_flags: "{% if ansible_os_family == 'FreeBSD' %}{{ buildbot_flags_freebsd }}{% elif ansible_os_family == 'Debian' %}{{ buildbot_flags_ubuntu }}{% endif %}"
    buildbot_master_cfg_content: |
      from buildbot.plugins import *
      c = BuildmasterConfig = {}
      c['workers'] = [worker.Worker("{{ project_worker_name }}", "{{ project_worker_password }}")]
      c['protocols'] = {'pb': {'port': 9989}}
      c['change_source'] = []
      c['change_source'].append(changes.GitPoller(
              'git://github.com/buildbot/hello-world.git',
              workdir='gitpoller-workdir', branch='master',
              gitbin='git',
              pollInterval=300))
      c['schedulers'] = []
      c['schedulers'].append(schedulers.SingleBranchScheduler(
                                  name="all",
                                  change_filter=util.ChangeFilter(branch='master'),
                                  treeStableTimer=None,
                                  builderNames=["runtests"]))
      c['schedulers'].append(schedulers.ForceScheduler(
                                  name="force",
                                  builderNames=["runtests"]))
      factory = util.BuildFactory()
      factory.addStep(steps.Git(repourl='git://github.com/buildbot/hello-world.git', mode='incremental'))
      factory.addStep(steps.ShellCommand(command=["trial", "hello"],
                                         env={"PYTHONPATH": "."}))
      c['builders'] = []
      c['builders'].append(
          util.BuilderConfig(name="runtests",
            workernames=["{{ project_worker_name }}"],
            factory=factory))
      c['services'] = []
      c['title'] = "Hello World CI"
      c['titleURL'] = "https://buildbot.github.io/hello-world/"
      c['buildbotURL'] = "http://localhost:8010/"
      c['www'] = dict(port=8010,
                      plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
      c['db'] = {
          'db_url' : "sqlite:///state.sqlite",
      }

    os_buildbot_extra_packages:
      FreeBSD:
        - devel/py-buildbot-www
      RedHat:
        - python36-pip
        - python36-devel
        - openssl-devel
      Debian:
        - python3-pip

    buildbot_extra_packages: "{{ os_buildbot_extra_packages[ansible_os_family] | default([]) }}"
    os_buildbot_extra_pip_packages:
      Debian:
        - buildbot-www
        - buildbot-waterfall-view
        - buildbot-console-view
        - buildbot-grid-view
    buildbot_extra_pip_packages: "{{ os_buildbot_extra_pip_packages[ansible_os_family] | default([]) }}"

    # ________________________________________________buildbot_worker
    os_buildbot_worker_flags:
      FreeBSD: |
        buildbot_worker_basedir="{{ buildbot_worker_conf_dir }}"
      # "
      Debian: |
        #WORKER_RUNNER=/usr/bin/buildbot-worker

        # 'true|yes|1' values in WORKER_ENABLED to enable instance and 'false|no|0' to
        # disable. Other values will be considered as syntax error.

        WORKER_ENABLED[1]=1                    # 1-enabled, 0-disabled
        WORKER_NAME[1]="default"               # short name printed on start/stop
        WORKER_USER[1]="buildbot"              # user to run worker as
        WORKER_BASEDIR[1]="{{ buildbot_worker_conf_dir }}"  # basedir to worker (absolute path)
        WORKER_OPTIONS[1]=""                   # buildbot options
        WORKER_PREFIXCMD[1]=""                 # prefix command, i.e. nice, linux32, dchroot
    # "

    buildbot_worker_flags: "{{ os_buildbot_worker_flags[ansible_os_family] | default('') }}"
    buildbot_worker_config: |
      import os
      from buildbot_worker.bot import Worker
      from twisted.application import service
      basedir = '{{ buildbot_worker_conf_dir }}'
      rotateLength = 10000000
      maxRotatedFiles = 10
      # if this is a relocatable tac file, get the directory containing the TAC
      if basedir == '.':
          import os.path
          basedir = os.path.abspath(os.path.dirname(__file__))
      # note: this line is matched against to check that this is a worker
      # directory; do not edit it.
      application = service.Application('buildbot-worker')
      from twisted.python.logfile import LogFile
      from twisted.python.log import ILogObserver, FileLogObserver
      logfile = LogFile.fromFullPath(
          os.path.join(basedir, "twistd.log"), rotateLength=rotateLength,
          maxRotatedFiles=maxRotatedFiles)
      application.setComponent(ILogObserver, FileLogObserver(logfile).emit)
      buildmaster_host = 'localhost'
      port = 9989
      workername = '{{ project_worker_name }}'
      passwd = '{{ project_worker_password }}'
      keepalive = 600
      umask = None
      maxdelay = 300
      numcpus = None
      allow_shutdown = None
      maxretries = None
      s = Worker(buildmaster_host, port, workername, passwd, basedir,
                 keepalive, umask=umask, maxdelay=maxdelay,
                 numcpus=numcpus, allow_shutdown=allow_shutdown,
                 maxRetries=maxretries)
      s.setServiceParent(application)

    # _______________________________________freebsd_pkg_repo
    # use my own packages because ones in ports have been broken.
    freebsd_pkg_repo:
      FreeBSD:
        enabled: "false"
        state: present
      # enable my own package repository, where the latest package is
      # available
      FreeBSD_devel:
        enabled: "true"
        state: present
        url: "http://pkg.i.trombik.org/{{ ansible_distribution_version | regex_replace('\\.', '') }}{{ansible_architecture}}-default-default/"
        mirror_type: http
        signature_type: none
        priority: 100

    # _______________________________________redhat_repo
    redhat_repo:
      epel:
        mirrorlist: "http://mirrors.fedoraproject.org/mirrorlist?repo=epel-{{ ansible_distribution_major_version }}&arch={{ ansible_architecture }}"
        gpgcheck: yes
        enabled: yes
        description: EPEL
