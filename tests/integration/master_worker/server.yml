---
- hosts: server
  become: yes
  become_method: sudo
  environment:
    http_proxy: "{{ http_proxy | default() }}"
    https_proxy: "{{ https_proxy | default() }}"
    no_proxy: "{{ no_proxy | default() }}"

  pre_tasks:
  roles:
    - name: trombik.freebsd_pkg_repo
    - name: trombik.git
    - ansible-role-buildbot
  vars:
    freebsd_pkg_repo:
      FreeBSD:
        enabled: "false"
        state: present
      FreeBSD_latest:
        enabled: "true"
        state: present
        url: pkg+https://pkg.FreeBSD.org/${ABI}/latest
        signature_type: fingerprints
        fingerprints: /usr/share/keys/pkg
        mirror_type: srv
    buildbot_flags_freebsd: |
      buildbot_basedir="{{ buildbot_conf_dir }}"
      buildbot_user="{{ buildbot_user }}"
    buildbot_extra_packages:
      - devel/py-buildbot-www
    buildbot_flags: "{{ buildbot_flags_freebsd }}"
    buildbot_create_master_flags: "-r"
    buildbot_master_cfg_content: |
      from buildbot.plugins import *
      import os
      # vim: ft=python

      c = BuildmasterConfig = {}
      #
      # builders:
      c['builders'] = []

      # OpenBSD ports build
      # build games/sl in the ports tree as a user. see ports(7)
      build_dir = '/var/buildslave/openbsd_pkg/build'
      port_name = 'games/sl'
      build_as_user_flags = 'WRKOBJDIR={base}/pobj PACKAGE_REPOSITORY={base}/packages BULK_COOKIES_DIR={base}/bulk UPDATE_COOKIES_DIR={base}/update DISTDIR={base}/distfiles PLIST_REPOSITORY={base}/plist'.format(base = build_dir)
      build_openbsd_pkg = util.BuildFactory()
      build_openbsd_pkg.addStep(steps.ShellCommand(
          name = 'make',
          command = 'make -C /usr/ports/{port} {flags}'.format(flags = build_as_user_flags, port = port_name),
          description = 'make games/sl'
          ))
      build_openbsd_pkg.addStep(steps.ShellCommand(
          name = 'make clean',
          command = 'make -C /usr/ports/{port} {flags} clean'.format(flags = build_as_user_flags, port = port_name)))

      # FreeBSD ports build
      # build ports-mgmt/pkg in my ports tree.
      build_pkg = util.BuildFactory()
      port_name = 'ports-mgmt/pkg'
      port_dbdir = '/usr/local/buildbot_worker/pkg/build/var/db/ports'

      build_pkg.addStep(steps.Git(
          repourl = 'https://github.com/trombik/freebsd-ports-mini',
          branch = '20190409'))
      build_pkg.addStep(steps.ShellCommand(
          name = 'Create PORT_DBDIR',
          command = 'mkdir -p {port_dbdir}'.format(port_dbdir = port_dbdir)))
      build_pkg.addStep(steps.ShellCommand(
          name = 'make',
          env = {'PORT_DBDIR': port_dbdir},
          command = 'make -C {port_name}'.format(port_name = port_name),
          description = 'make pkg from ports'))
      build_pkg.addStep(steps.ShellCommand(
          name='make clean',
          env={'PORT_DBDIR': port_dbdir},
          command='make -C {port_name} clean'.format(port_name = port_name),
          description='make clean'))

      # poudriere bulk build
      # build ports-mgmt/pkg with poudriere.
      build_poudriere = util.BuildFactory()
      build_poudriere.addStep(steps.ShellCommand(

          # use `poudriere bulk` as `poudriered` is still alpha
          name = 'poudriere bulk',
          command = 'sudo poudriere bulk -p freebsd -j 12_0 -C ports-mgmt/pkg',

          # send SIGINFO instead of SIGKILL.
          #
          # the command runs as root. as such, attempting to kill the
          # process by user `buildbot` does not work. and when the master does
          # anyway, the jail would not be destroyed, causing next attempt to
          # run poudriere to fail.
          interruptSignal = 'INFO'))

      # pio build
      # build an example platformio project.
      build_pio = util.BuildFactory()
      build_pio.addStep(steps.Git(
          repourl = 'https://github.com/platformio/platformio-examples',
          branch = 'master'))
      build_pio.addStep(steps.ShellCommand(
          name = 'clean',
          command = 'rm -rf build/wiring-blink/.pioenvs'))
      build_pio.addStep(steps.ShellCommand(
          name = 'pio run',
          command = 'pio run -vv -e nodemcu',
          workdir = 'build/wiring-blink',
          env = {
              'PATH': '/usr/local/buildbot_worker/.local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin/',
              'HOME': '/usr/local/buildbot_worker'}))

      build_runtests = util.BuildFactory()
      build_runtests.addStep(
              steps.Git(
                  repourl='git://github.com/buildbot/hello-world.git',
                  mode='incremental'))
      build_runtests.addStep(
              steps.ShellCommand(
                  command = ["trial", "hello"],
                  env={"PYTHONPATH": "."}))

      c['builders'].append(
              util.BuilderConfig(
                  name = "runtests",
                  workernames = ["worker1"],
                  factory = build_runtests))
      c['builders'].append(
              util.BuilderConfig(
                  name = 'pkg',
                  workernames = ['worker1'],
                  factory = build_pkg))
      c['builders'].append(
              util.BuilderConfig(
                  name = 'pio',
                  workernames = ['worker1'],
                  factory = build_pio))
      c['builders'].append(
              util.BuilderConfig(
                  name = 'poudriere',
                  workernames = ['worker1'],
                  factory = build_poudriere))
      c['builders'].append(
              util.BuilderConfig(
                  name = 'openbsd_pkg',
                  workernames = ['worker2'],
                  factory = build_openbsd_pkg))

      # schedulers
      c['schedulers'] = []
      c['schedulers'].append(schedulers.SingleBranchScheduler(
          name = "all",
          change_filter = util.ChangeFilter(branch='master'),
          treeStableTimer = None,
          builderNames = ["runtests"]))
      # `force` build, allows users to build manually
      c['schedulers'].append(schedulers.ForceScheduler(
          name="force",
          builderNames = ["runtests", "pio", "poudriere", "pkg", "openbsd_pkg"]))
      # hourly scheduler
      c['schedulers'].append(schedulers.Periodic(
          name = "hourly",
          builderNames = ["pkg", "pio", "poudriere", "pkg", "openbsd_pkg"],
          periodicBuildTimer = 3600))

      # master configuration
      c['workers'] = [worker.Worker("worker1", "pass"), worker.Worker("worker2", "pass")]
      c['protocols'] = {'pb': {'port': 9989}}

      c['change_source'] = []
      c['change_source'].append(changes.GitPoller(
            'git://github.com/buildbot/hello-world.git',
            workdir='gitpoller-workdir', branch='master',
            pollInterval=300))

      c['change_source'].append(changes.GitPoller(
        'https://github.com/trombik/freebsd-ports-mini',
        workdir='ports',
        branch='20190409',
        pollAtLaunch=True,
        gitbin='/usr/local/bin/git',
        pollInterval=300))


      c['services'] = []
      c['title'] = "Hello World CI"
      c['titleURL'] = "https://buildbot.github.io/hello-world/"
      c['buildbotURL'] = "http://{{ ansible_em1.ipv4[0].address }}:8010/"
      c['www'] = dict(port=8010,
                    plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
      c['db'] = {
        'db_url' : "sqlite:///state.sqlite",
      }
